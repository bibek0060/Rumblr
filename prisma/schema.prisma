// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique
  password      String
  bio           String?
  resetToken    String?   @unique
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  posts         Post[]
  comments      Comment[]
  communities   Community[]    @relation("CommunityMembers")
  moderators    Community[]    @relation("CommunityModerators")
  votes         Vote[]
  followers     Follow[]       @relation("Following")
  following     Follow[]       @relation("Followers")
  reports       Report[]
  sentMessages     DirectMessage[] @relation("SentMessages")
  receivedMessages DirectMessage[] @relation("ReceivedMessages")
  chatMessages     ChatMessage[]
  notifications    Notification[]  @relation("UserNotifications")
  sentNotifications Notification[] @relation("SentNotifications")
}

model Community {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  rules       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  posts       Post[]
  members     User[]    @relation("CommunityMembers")
  moderators  User[]    @relation("CommunityModerators")
  messages    ChatMessage[]
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  type        String    // text, link, image, video
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  comments    Comment[]
  votes       Vote[]
  reports     Report[]
  tags        Tag[]     @relation("PostTags")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  parentId  String?
  replies   Comment[] @relation("CommentToComment")
  votes     Vote[]
  reports   Report[]
}

model Vote {
  id        String   @id @default(cuid())
  value     Int      // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())

  // Relations
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Followers", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}

model Report {
  id        String   @id @default(cuid())
  reason    String
  status    String   @default("pending") // pending, resolved, dismissed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reporter  User     @relation(fields: [reporterId], references: [id])
  reporterId String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     Post[]   @relation("PostTags")
}

model ChatMessage {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
}

model DirectMessage {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId  String
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // like, comment, follow, mention
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
  userId    String
  sender    User     @relation("SentNotifications", fields: [senderId], references: [id])
  senderId  String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
} 